/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2015 Umeng, Inc
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.simple.injector.apt.writer;

import org.simple.injector.ViewInjector;

import java.io.IOException;
import java.io.Writer;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.VariableElement;

public class ViewAdapterWriter implements AdapterWriter {
    ProcessingEnvironment mProcessingEnv;
    Filer mFiler;

    public ViewAdapterWriter(ProcessingEnvironment processingEnv) {
        mProcessingEnv = processingEnv;
        mFiler = processingEnv.getFiler();
    }

    @Override
    public void generate(VariableElement element) {
//        TypeElement typeElement = (TypeElement) element.getEnclosingElement();
//        String packageName = getPackageName(typeElement);
//        // 新建的类名
//        InjectorInfo info = new InjectorInfo(packageName, typeElement.getSimpleName().toString());
//        Writer writer = null;
//        try {
//            JavaFileObject javaFileObject = mFiler.createSourceFile(info.getClassFullPath(),
//                    element);
//            writer = javaFileObject.openWriter();
//            generateCode(writer, element, info);
//        } catch (IOException e) {
//            e.printStackTrace();
//        } finally {
//            IOUtil.closeQuitly(writer);
//        }
    }

    // private void generateCode(Writer writer, VariableElement element,
    // InjectorInfo info)
    // throws IOException {
    // ViewInjector injector = element.getAnnotation(ViewInjector.class);
    // String fieldName = element.getSimpleName().toString();
    //
    // writer.write("package " + info.packageName + " ;");
    // writer.write("\n\n");
    // writer.write("import org.simple.injector.adapter.ViewAdapter ;");
    // writer.write("import org.simple.injector.util.ViewFinder;");
    //
    // writer.write("\n\n\n");
    // writer.write("/* This class is generated by Simple ViewInjector, please don't modify! */ ");
    // writer.write("\n");
    // writer.write("public class " + info.newClassName
    // + " implements ViewAdapter<" + info.modelName + "> { ");
    // writer.write("\n");
    // // 查找方法
    // writer.write("  public void findViews(" + info.modelName
    // + " target)  { target." + fieldName +
    // " =  ViewFinder.findViewById(target, "
    // + injector.value()
    // + "  ) ; }");
    // writer.write("\n\n");
    // writer.write(" } ");
    // }

    private String getPackageName(Element element) {
        return mProcessingEnv.getElementUtils().getPackageOf(element).getQualifiedName().toString();
    }

}
